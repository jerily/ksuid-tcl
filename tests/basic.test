package require tcltest
package require ksuid

namespace import -force ::tcltest::test

::tcltest::configure {*}$argv

test basic-1 {length of ksuid} -body {
    set ksuid [::ksuid::generate_ksuid]
    string length $ksuid
} -result {27}

test basic-2 {generate ksuid, get its parts, create ksuid again from parts and compare} -body {
    set ksuid [::ksuid::generate_ksuid]
    set parts [::ksuid::ksuid_to_parts $ksuid]
    set ksuid_from_parts [::ksuid::parts_to_ksuid $parts]
    expr {$ksuid eq $ksuid_from_parts}
} -result {1}

test basic-3 {next of a prev of a ksuid and prev of a next of a ksuid are equal} -body {
    set ksuid [::ksuid::generate_ksuid]
    set prev_of_next_ksuid [::ksuid::prev_ksuid [::ksuid::next_ksuid $ksuid]]
    set next_of_prev_ksuid [::ksuid::next_ksuid [::ksuid::prev_ksuid $ksuid]]
    expr {$ksuid eq $prev_of_next_ksuid && $ksuid eq $next_of_prev_ksuid}
} -result {1}

test basic-4 {next of max is zero} -body {
    set ksuid "aWgEPTl1tmebfsQzFP4bxwgy80V"
    ::ksuid::next_ksuid $ksuid
} -result {000000000000000000000000000}

test basic-5 {prev of zero is max} -body {
    set ksuid "000000000000000000000000000"
    ::ksuid::prev_ksuid $ksuid
} -result {aWgEPTl1tmebfsQzFP4bxwgy80V}

test error-1 {invalid ksuid} -body {
    set ksuid "aaaaaaaaaaaaaaaaaaaaaaaaaaa"
    ::ksuid::ksuid_to_parts $ksuid
} -returnCodes error -result {invalid base62}

test error-2 {invalid base62} -body {
    set ksuid "aWgEPTl1tmebfsQzFP4bxwgy80!"
    ::ksuid::ksuid_to_parts $ksuid
} -returnCodes error -result {invalid base62}

test error-3 {invalid payload length} -body {
    set d [dict create timestamp 0 payload 0]
    ::ksuid::parts_to_ksuid $d
} -returnCodes error -result {invalid hex}

test error-4 {invalid hex} -body {
    set d [dict create timestamp 0 payload 00]
    ::ksuid::parts_to_ksuid $d
} -returnCodes error -result {invalid hex}

test error-5 {invalid timestamp} -body {
    set d [dict create timestamp abc payload ""]
    ::ksuid::parts_to_ksuid $d
} -returnCodes error -result {expected integer but got "abc"}

test error-5 {invalid hex} -body {
    set d [dict create timestamp 0 payload ""]
    ::ksuid::parts_to_ksuid $d
} -returnCodes error -result {invalid hex}

test correct-parts-to-ksuid-1 {check correct parts to ksuid} -body {
    set d [dict create timestamp 294295716 payload "5b4bd92eeb34c91060ebd36a32738f03"]
    ::ksuid::parts_to_ksuid $d
} -result {2VB3bNOnJhCPqYfm9UQwV90tyTb}

test correct-ksuid-to-parts-1 {check correct ksuid to parts} -body {
    ::ksuid::ksuid_to_parts "2VB3bNOnJhCPqYfm9UQwV90tyTb"
} -result {timestamp 294295716 payload 5b4bd92eeb34c91060ebd36a32738f03}

test correct-parts-to-ksuid-2 {check correct parts to ksuid} -body {
    set d [dict create timestamp 294295845 payload "2e6ab5cfe184cf97c5db875c5f6b3570"]
    ::ksuid::parts_to_ksuid $d
} -result {2VB3rZ7VN8syq2WsQDdWt6DdvSi}

test correct-ksuid-to-parts-2 {check correct ksuid to parts} -body {
    ::ksuid::ksuid_to_parts "2VB3rZ7VN8syq2WsQDdWt6DdvSi"
} -result {timestamp 294295845 payload 2e6ab5cfe184cf97c5db875c5f6b3570}

test correct-parts-to-ksuid-3 {check correct parts to ksuid} -body {
    set d [dict create timestamp 294349141 payload "121C4D73B24F6398AE8B688921DCBEA4"]
    ::ksuid::parts_to_ksuid $d
} -result {2VCnt7FEsb3oJqcb7Z3aP8a3tMC}

test correct-ksuid-to-parts-3 {check correct ksuid to parts} -body {
    ::ksuid::ksuid_to_parts "2VCnt7FEsb3oJqcb7Z3aP8a3tMC"
} -result {timestamp 294349141 payload 121c4d73b24f6398ae8b688921dcbea4}

test correct-parts-to-ksuid-4 {check correct parts to ksuid} -body {
    set d [dict create timestamp 107610780 payload "73FC1AA3B2446246D6E89FCD909E8FE8"]
    ::ksuid::parts_to_ksuid $d
} -result {0ujzPyRiIAffKhBux4PvQdDqMHY}

test correct-ksuid-to-parts-4 {check correct ksuid to parts} -body {
    ::ksuid::ksuid_to_parts "0ujzPyRiIAffKhBux4PvQdDqMHY"
} -result {timestamp 107610780 payload 73fc1aa3b2446246d6e89fcd909e8fe8}

test correct-parts-to-ksuid-5 {check correct parts to ksuid} -body {
    set d [dict create timestamp 107611700 payload "9850EEEC191BF4FF26F99315CE43B0C8"]
    ::ksuid::parts_to_ksuid $d
} -result {0uk1Hbc9dQ9pxyTqJ93IUrfhdGq}

test correct-ksuid-to-parts-5 {check correct ksuid to parts} -body {
    ::ksuid::ksuid_to_parts "0uk1Hbc9dQ9pxyTqJ93IUrfhdGq"
} -result {timestamp 107611700 payload 9850eeec191bf4ff26f99315ce43b0c8}

proc sleep {millis} {
    after $millis set stop_wait &
    vwait stop_wait
}

test compare-ksuids-1 {compare ksuids} -body {
    set ksuid1 [::ksuid::generate_ksuid]

    sleep 2000

    set ksuid2 [::ksuid::generate_ksuid]
    expr {$ksuid1 ne $ksuid2 && $ksuid1 < $ksuid2}
} -result {1}


test compare-ksuids-2 {compare ksuid timestamps} -body {
    set ksuid1 [::ksuid::generate_ksuid]

    sleep 2000

    set ksuid2 [::ksuid::generate_ksuid]

    set parts1 [::ksuid::ksuid_to_parts $ksuid1]
    set parts2 [::ksuid::ksuid_to_parts $ksuid2]

    set timestamp1 [dict get $parts1 timestamp]
    set timestamp2 [dict get $parts2 timestamp]

    expr {$timestamp1 < $timestamp2}
} -result {1}